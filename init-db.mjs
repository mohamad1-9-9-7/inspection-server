// ุชุญููู ูุชุบูุฑุงุช ุงูุจูุฆุฉ ูู .env
import 'dotenv/config';
import pkg from 'pg';
const { Pool } = pkg;

// ุนุฑุถ ุงูู DATABASE_URL ููุชุฃูุฏ ุฃููุง ููุฑูุกุฉ
console.log("๐ DATABASE_URL =", process.env.DATABASE_URL);

if (!process.env.DATABASE_URL) {
  console.error("โ DATABASE_URL ุบูุฑ ููุฌูุฏ. ุชุฃูุฏ ูู ููู .env");
  process.exit(1);
}

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false } // ุถุฑูุฑู ูุน Neon
});

try {
  // ุงุฎุชุจุงุฑ ุงูุงุชุตุงู
  const res = await pool.query('SELECT NOW() AS now');
  console.log(`โ ูุชุตู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช. ุงูููุช: ${res.rows[0].now}`);

  // ุฅูุดุงุก ุงูุฌุฏูู ุฅุฐุง ูู ููู ููุฌูุฏ
  await pool.query(`
    CREATE TABLE IF NOT EXISTS reports (
      id SERIAL PRIMARY KEY,
      reporter TEXT NOT NULL,
      type TEXT NOT NULL,
      payload JSONB NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);

  console.log('โ ุฌุฏูู "reports" ุชู ุฅูุดุงุคู ุฃู ููุฌูุฏ ูุณุจูุงู');
} catch (err) {
  console.error("โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุฃู ุฅูุดุงุก ุงูุฌุฏูู:", err.message);
} finally {
  await pool.end();
}
